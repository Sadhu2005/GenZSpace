name: 📱 Deploy App to Google Play Store Internal Testing

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'lib/**'
      - 'android/**'
      - 'ios/**'
      - 'firebase.json'
      - 'firestore.rules'
      - 'firestore.indexes.json'
      - 'storage.rules'
      - '.github/workflows/app-deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'lib/**'
      - 'android/**'
      - 'ios/**'
  workflow_dispatch: # Manual trigger option
    inputs:
      deploy_type:
        description: 'Deploy App to Google Play Store Internal Testing'
        required: true
        default: 'app'
        type: choice
        options:
          - app

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  PACKAGE_NAME: 'com.anu.GenZSpace'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for versioning

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: 🎯 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 📦 Get Flutter dependencies
      run: flutter pub get

    - name: 🔍 Analyze Flutter code
      run: flutter analyze --no-fatal-infos

    - name: 🧪 Run Flutter tests
      run: flutter test --coverage

    - name: ⬆️ Get current version
      id: version
      run: |
        VERSION_NAME=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
        VERSION_CODE=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
        echo "version-name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version-code=$VERSION_CODE" >> $GITHUB_OUTPUT

    - name: 🏗️ Build Android App Bundle (AAB)
      run: |
        echo "🏗️ Building Android App Bundle..."
        flutter build appbundle --release --no-tree-shake-icons --verbose
        echo "✅ Build command completed"

    - name: 🔍 Verify AAB file exists
      run: |
        echo "🔍 Checking for AAB file..."
        find . -name "*.aab" -type f
        echo "📁 Build directory contents:"
        ls -la build/app/outputs/bundle/release/ || echo "Release directory not found"
        echo "📁 All build outputs:"
        find build -name "*.aab" -type f || echo "No AAB files found in build directory"
        echo "📁 Flutter build outputs:"
        find build -name "*.apk" -type f || echo "No APK files found"

    - name: 🚀 Upload to Google Play Store Internal Testing
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: ${{ env.PACKAGE_NAME }}
        releaseFile: build/app/outputs/bundle/release/app-release.aab
        track: internal
        status: completed
        inAppUpdatePriority: 0 # Optional: 0 for flexible, 5 for immediate
        # Changes not required for internal testing, but good practice
        # changesNotSentForReview: true
        # mappingFile: build/app/outputs/mapping/release/mapping.txt # Optional for obfuscated builds

    - name: ✅ Notify Success
      if: success()
      run: |
        echo "🚀 App deployment to Google Play Store Internal Testing successful!"
        echo "Version Name: ${{ env.VERSION_NAME }}"
        echo "Version Code: ${{ env.VERSION_CODE }}"
        echo "Track: internal"
        echo "Check Google Play Console for the new build."

    - name: ❌ Notify Failure
      if: failure()
      run: |
        echo "❌ App deployment to Google Play Store Internal Testing failed!"
        echo "Please check the workflow logs for details."