name: 🚀 Deploy to Google Play Store Internal Testing

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  PACKAGE_NAME: 'com.anu.GenZSpace'

jobs:
  deploy-to-play-store:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: ☕ Setup Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: 🎯 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 📦 Get dependencies
      run: |
        flutter pub get
        
    - name: 🔍 Validate Flutter setup
      run: |
        flutter doctor -v
        flutter analyze --no-fatal-infos || echo "⚠️ Analysis completed with warnings"

    - name: ⬆️ Auto-increment version
      id: version
      run: |
        CURRENT_VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
        CURRENT_CODE=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
        NEW_CODE=$((CURRENT_CODE + 1))
        sed -i "s/version: $CURRENT_VERSION+$CURRENT_CODE/version: $CURRENT_VERSION+$NEW_CODE/" pubspec.yaml
        echo "VERSION_NAME=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "VERSION_CODE=$NEW_CODE" >> $GITHUB_ENV
        echo "📱 Version: $CURRENT_VERSION+$NEW_CODE"

    - name: 🏗️ Build AAB with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        build-root-directory: android
        gradle-version: 8.11.1
        arguments: clean :app:bundleRelease -x lint --no-daemon --info
      continue-on-error: false

    - name: ✅ Verify AAB Build Success
      run: |
        if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
          echo "✅ AAB build completed successfully"
          ls -lh android/app/build/outputs/bundle/release/app-release.aab
        else
          echo "❌ AAB file not found in expected location"
          exit 1
        fi

    - name: 🔍 Locate AAB for Upload
      id: find_aab
      run: |
        echo "🔍 Locating AAB file for upload..."
        
        # Check multiple possible locations
        ANDROID_AAB="android/app/build/outputs/bundle/release/app-release.aab"
        FLUTTER_AAB="build/app/outputs/bundle/release/app-release.aab"
        
        if [ -f "$ANDROID_AAB" ]; then
          echo "✅ Found AAB: $ANDROID_AAB"
          echo "aab_path=$ANDROID_AAB" >> $GITHUB_OUTPUT
          echo "aab_size=$(stat -c%s "$ANDROID_AAB")" >> $GITHUB_OUTPUT
          ls -lh "$ANDROID_AAB"
        elif [ -f "$FLUTTER_AAB" ]; then
          echo "✅ Found AAB: $FLUTTER_AAB"
          echo "aab_path=$FLUTTER_AAB" >> $GITHUB_OUTPUT
          echo "aab_size=$(stat -c%s "$FLUTTER_AAB")" >> $GITHUB_OUTPUT
          ls -lh "$FLUTTER_AAB"
        else
          echo "❌ AAB file not found in standard locations"
          echo "🔍 Debug: Searching all .aab files..."
          find . -name "*.aab" -type f -exec ls -lh {} \;
          echo "📂 Checking build directories..."
          ls -la android/app/build/outputs/bundle/ 2>/dev/null || echo "Android build directory not found"
          ls -la build/app/outputs/bundle/ 2>/dev/null || echo "Flutter build directory not found"
          exit 1
        fi

    - name: 🔐 Validate Google Play Credentials
      run: |
        if [ -z "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" ]; then
          echo "❌ Error: GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret not configured"
          echo "🔧 Please add your Google Play Service Account JSON to GitHub secrets"
          echo "💡 Go to Settings > Secrets > Actions > Add repository secret"
          exit 1
        else
          echo "✅ Google Play credentials found"
          echo "📦 JSON length: ${#{{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}}"
        fi

    - name: 🚀 Upload to Google Play Store Internal Testing
      uses: r0adkll/upload-google-play@v1.1.0
      with:
        serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: ${{ env.PACKAGE_NAME }}
        releaseFile: ${{ steps.find_aab.outputs.aab_path }}
        track: internal
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📱 Verification & Summary
      run: |
        echo ""
        echo "🎉 =========================================="
        echo "🚀 GenZSpace Successfully Deployed!"
        echo "==========================================="
        echo "📱 App: GenZSpace"
        echo "📦 Package: ${{ env.PACKAGE_NAME }}"
        echo "🆕 Version: ${{ env.VERSION_NAME }} (${{ env.VERSION_CODE }})"
        echo "📁 AAB Size: ${{ steps.find_aab.outputs.aab_size }} bytes"
        echo "🎯 Track: Internal Testing"
        echo "==========================================="
        echo ""
        echo "📱 How to test on your phone:"
        echo "1. Open Google Play Store"
        echo "2. Search for 'GenZSpace'"
        echo "3. Look for 'Internal testing' version"
        echo "4. Install/Update the app"
        echo ""
        echo "⏱️ Wait 5-10 minutes for processing"
        echo "✅ Check Google Play Console for upload status"
        echo "==========================================="

    - name: 💬 Upload Success Notification
      if: success()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 GenZSpace Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Your app is now available for **Internal Testing**!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Testing Instructions:" >> $GITHUB_STEP_SUMMARY
        echo "1. Open Google Play Store on your phone" >> $GITHUB_STEP_SUMMARY
        echo "2. Search for **GenZSpace**" >> $GITHUB_STEP_SUMMARY
        echo "3. Download/Update from Internal Testing track" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Release Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION_NAME }} (${{ env.VERSION_CODE }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Ready for testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Track**: Internal Testing" >> $GITHUB_STEP_SUMMARY

    - name: ❌ Upload Failed Notification
      if: failure()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please check the logs above for errors and try again." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Common issues:" >> $GITHUB_STEP_SUMMARY
        echo "- Invalid Google Play Service Account JSON" >> $GITHUB_STEP_SUMMARY
        echo "- Package name mismatch" >> $GITHUB_STEP_SUMMARY
        echo "- Build failures" >> $GITHUB_STEP_SUMMARY
