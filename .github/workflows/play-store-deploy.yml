name: 🚀 Deploy to Google Play Store Internal Testing

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  PACKAGE_NAME: 'com.anu.GenZSpace'

jobs:
  deploy-to-play-store:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: ☕ Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: 🎯 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 📦 Get dependencies
      run: flutter pub get

    - name: ⬆️ Auto-increment version
      id: version
      run: |
        CURRENT_VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
        CURRENT_CODE=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
        NEW_CODE=$((CURRENT_CODE + 1))
        sed -i "s/version: $CURRENT_VERSION+$CURRENT_CODE/version: $CURRENT_VERSION+$NEW_CODE/" pubspec.yaml
        echo "VERSION_NAME=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "VERSION_CODE=$NEW_CODE" >> $GITHUB_ENV
        echo "📱 Version: $CURRENT_VERSION+$NEW_CODE"

    - name: 🏗️ Build AAB with Gradle (no wrapper required)
      uses: gradle/gradle-build-action@v2
      with:
        build-root-directory: android
        arguments: clean :app:bundleRelease -x lint --no-daemon

    - name: 🔍 Find AAB file
      id: find_aab
      run: |
        echo "🔍 Searching for AAB files..."
        if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
          echo "aab_path=android/app/build/outputs/bundle/release/app-release.aab" >> $GITHUB_OUTPUT
          echo "✅ AAB found in android directory"
          ls -la android/app/build/outputs/bundle/release/app-release.aab
        elif [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
          echo "aab_path=build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_OUTPUT
          echo "✅ AAB found in build directory"
          ls -la build/app/outputs/bundle/release/app-release.aab
        else
          echo "❌ No AAB file found"
          echo "📁 Listing all *.aab for debugging:" 
          find . -name "*.aab" -type f -exec ls -la {} \;
          exit 1
        fi

    - name: 🚀 Upload to Google Play Store Internal Testing
      uses: r0adkll/upload-google-play@v1.0.3
      with:
        serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: ${{ env.PACKAGE_NAME }}
        releaseFile: ${{ steps.find_aab.outputs.aab_path }}
        track: internal
        status: completed
        inAppUpdatePriority: 1

    - name: ✅ Success
      run: |
        echo "🎉 GenZSpace deployed to Google Play Store Internal Testing!"
        echo "📱 Package: ${{ env.PACKAGE_NAME }}"
        echo "📊 Version: ${{ env.VERSION_NAME }} (${{ env.VERSION_CODE }})"
        echo "🎯 Track: Internal Testing"
        echo "📱 Your app will be available for testing in a few minutes!"
        echo "🔗 Go to Google Play Store and search for 'GenZSpace'"
